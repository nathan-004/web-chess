from app.engine.pieces import King, Rook
from app.engine.utils import Position, Move, SpecialMove
from app.engine.game import blank_board, ChessBoard
from app.engine.utils import WHITE

def test_white_kingside_castling():
    board = ChessBoard(blank_board())
    king_pos = Position(4, 7)  # e1
    rook_pos = Position(7, 7)  # h1

    king = King(WHITE)
    rook = Rook(WHITE)
    
    board.board[7][4] = king
    board.board[7][7] = rook

    moves = king.special_moves(king_pos, board)
    
    # Cherche un SpecialMove avec destination g1 (6,7)
    castling_move = None
    for move in moves:
        if isinstance(move, SpecialMove) and move.main.end_pos == Position(6, 7):
            castling_move = move
            break

    assert castling_move is not None, "Le roque côté roi devrait être possible"
    assert castling_move.main.end_pos == Position(6, 7)
    assert castling_move.other.end_pos == Position(5, 7)  # La tour va en f1

def test_white_queenside_castling():
    board = ChessBoard(blank_board())
    king_pos = Position(4, 7)  # e1
    rook_pos = Position(0, 7)  # a1

    king = King(WHITE)
    rook = Rook(WHITE)
    
    board[7][4] = king
    board[7][0] = rook

    moves = king.special_moves(king_pos, board)
    
    castling_move = None
    for move in moves:
        if isinstance(move, SpecialMove) and move.main.end_pos == Position(2, 7):  # c1
            castling_move = move
            break

    assert castling_move is not None, "Le roque côté dame devrait être possible"
    assert castling_move.main.end_pos == Position(2, 7)
    assert castling_move.other.end_pos == Position(3, 7)  # La tour va en d1